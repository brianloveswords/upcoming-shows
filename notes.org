* shell pipeline
spotify-favs | sort | uniq -c | sort -n -r | awk '{if ($1 >= 4) { print $0 }}'

* DONE save token
CLOSED: [2018-07-07 Sat 11:27]
- save
  - get auth token
  - encode to gob bytes
  - encode using key derived from clientSecret
  - save to disk

- load
  - load from disk
  - decode using key derived from clientSecret
  - decode from gob bytes

*** DONE encrypting
CLOSED: [2018-07-07 Sat 11:27]
- dk, err := scrypt.Key([]byte("some password"), salt, 32768, 8, 1, 32)
- then use AES

* DONE check if token *ever* expires
CLOSED: [2018-07-07 Sat 13:07]
if it doesn't, we don't have to re-save after load

- it does expire, but let's see what happens if I try to use an expired
  token, if it auto-refreshes or what

- oh heck yeah, expired tokens auto-refresh so we good

* DONE is there a way to save the ID and Secret at build time?
CLOSED: [2018-07-07 Sat 12:53]
turns out yes there is:

go build -ldflags "-X main.<variable>=$<NAME>"

* DONE use ~open~ to just open the url for the user
instead of making them copy and paste a link, maybe that would be better

* DONE do songkick searches to get the songkick ids
- open search
- wait on stdin for the id
- https://www.songkick.com/search?utf8=âœ“&query=${artist}

- make sure to url encode the artist name

* DONE make playlist from songkick url
- eg: https://www.songkick.com/concerts/33692814-royal-they-at-alphaville
- scrape Line-up, add latest album from each band to playlist

  babysteps
  - [X] create playlist
  - [X] add latest album for 1 artist by ID to playlist
  - [X] artist search -> spotify ID
  - [X] scrape lineup (page -> [artistIDs])

* DONE conditionally re-save the token, only if it's changed
- saving is somewhat expensive because of scrypt, so we shouldn't do it all the dang time, let's just do it only if the token has changed.

* DONE printing
think about:

- which functions should print at all, and which are "internal" and should shut the fuck up and just return different types of errors?
- different levels of verbose? debug/verbose/normal/silent
- how to structure debugging printer so it's ~grep~ friendly
- 1 global logger to rule them all
- everything prints to stderr except CmdOutput
- color optional?
- env var, LOGLEVEL:<debug|verbose|normal|silent>

logger.Debug

- [debug] playlist:create:request-songkick-page: requesting page
- [debug] playlist:create:parse-songkick-page: parsing page
- [debug] playlist:create:parse-songkick-page: extracted xyz
- [debug] playlist:create:parse-songkick-page: couldn't do the thing

logger.Verbose

logger.Normal

logger.CmdOutput

* DONE command and flag parser

// valid
mixtape artist=chavez length=10
mixtape length=10 artist=chavez
mixtape n=10 artist=chavez           // n is alias for length
mixtape n=10 length=25 artist=chavez // length will be 25
mixtape artist                       // defaults to current artist
mixtape track length=100             // current track

// invalid
mixtape length=10     // missing "artist" or "track"
mixtape blargh        // unknown parameter "blargh"
mixtape length="fuck" // fuck is not a number
mixtape artist n=10   // ag missing "artist" or "track"
mixtape artist track  // artist & track mutually exclusive


CommandTree{
    Name: "spotify",
    Commands: []Command{
        Command{
          Name:    "next",
          Aliases: []string{"skip"},
          Help:    "skip to the next track",
        }
        Command{
          Name:    "play",
          Help:    "play the current track",
        }
    }
}

* DONE directory organization

- auth
- bin
- cli
- logger
- mixtape
- playctl
- songkick
- util

* DONE store things according to XDG Base Directory Specification
https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html

data: $XDG_DATA_HOME or $HOME/.local/share/
config: $XDG_CONFIG_HOME or $HOME/.config/
cache: $XDG_CACHE_HOME or $HOME/.cache/


config:
- nothing yet

data:
- encrypted oauth token

cache:
- spotify data, like saved tracks
- songkick data, like spotifyID->songkickID mapping


*** code

basedir := xdg.App("spotify-cli")

basedir.DataCreate("oath-token")
basedir.DataOpen("oauth-token)
basedir.CacheStore
basedir.CacheLoad
basedir.ConfigStore
basedir.ConfigLoad


* command parser, part 2

* command line smoke tester
cmd.Lint(t)


- check examples
  - does it parse?
  - if there are parameters, there should be examples
  - is there an example for each parameter?
- check documentation
- check for unreachable cmds
