/*
func getAlbumTracks(c *spotify.Client, album *spotify.SimpleAlbum) []spotify.SimpleTrack {
	tracks, err := c.GetAlbumTracks(album.ID)
	if err != nil {
		panic(err)
	}
	return tracks.Tracks
}
*/

/*
func addAlbumsToPlaylist(
	client *spotify.Client,
	playlist *spotify.FullPlaylist,
	albums []spotify.SimpleAlbum,
) {
	user, _ := client.CurrentUser()
	for _, album := range albums {
		tracks := getAlbumTracks(client, &album)
		_, err := client.AddTracksToPlaylist(user.ID, playlist.ID, tracksToIDs(tracks)...)
		if err != nil {
			panic(err)
		}
	}
}
*/

// we want to get all of the latest singles released after the latest
// album, and also the latest album
/*
func getLatestAlbums(client *spotify.Client, artistID spotify.ID) []spotify.SimpleAlbum {
	limit := 50
	albumType := spotify.AlbumTypeSingle | spotify.AlbumTypeAlbum
	page, err := client.GetArtistAlbumsOpt(artistID, &spotify.Options{
		Limit: &limit,
	}, &albumType)

	albums := page.Albums

	if err != nil {
		panic(err)
	}

	// TODO: assumes reverse chronological order, make sure that ends up
	// holding to be generally true
	var results []spotify.SimpleAlbum
	for _, album := range albums {
		results = append(results, album)
		if album.AlbumType == "album" {
			break
		}
	}

	return results
}
*/


/*
var reURL = regexp.MustCompile("^https?://")

func createPlaylist(client *spotify.Client, name string) *spotify.FullPlaylist {
	user, err := client.CurrentUser()
	if err != nil {
		glog.Fatal("couldn't access current user: %s", err)
	}

	playlist, err := client.CreatePlaylistForUser(user.ID, name, true)
	if err != nil {
		glog.Fatal("couldn't create playlist for user %s: %s", user.ID, err)
	}

	return playlist
}
*/

/*
func playlistCreateParse(args []string) string {
	defer glog.Enter("playlistCreateParse")()

	input := args[0]
	if reURL.MatchString(input) {
		if strings.HasPrefix(input, "https://www.songkick.com/concerts/") {
			return "songkick-show"
		}
		glog.Fatal("don't know what to do with url %s", input)
	}

	if args[0] == "random-by-artist-id" {
		if len(args[1:]) != 1 {
			glog.Fatal("err: playlist create random-by-artist-id expects 1 argument")
		}
		return "random-by-artist-id"
	}
	return "plain"
}
*/

/*
func playlistFromSongkickShowPage(url string) {
	defer glog.Enter("playlistFromSongkickShowPage")()
	glog.Verbose("creating playlist from page %s", color.YellowString(url))

	client := auth.SetupClient()
	artists := artistsFromSongkickShowPage(url)
	name := strings.Join(artists, "/")

	glog.Log("creating playlist %s", color.CyanString(name))

	playlist := createPlaylist(client, name)
	addArtistLatestAlbumsPlaylist(client, playlist, artists)

	// TODO: option to open the resulting spotify playlist??
	glog.CmdOutput("%s", playlist.URI)
}
*/

/*
func addArtistLatestAlbumsPlaylist(
	client *spotify.Client,
	playlist *spotify.FullPlaylist,
	artists []string,
) *spotify.FullPlaylist {
	defer glog.Enter("addArtistLatestAlbumsPlaylist")()
	for _, artist := range artists {
		id := findArtistID(client, artist)
		if id == nil {
			glog.Log("couldn't find an artist result for %s", color.RedString(artist))
			continue
		}
		albums := getLatestAlbums(client, *id)
		addAlbumsToPlaylist(client, playlist, albums)
	}
	return playlist
}
*/
